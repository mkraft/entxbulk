{{- define "bulk_update_gen" -}}
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"
	"strings"
)

{{- range .Nodes }}
{{- $node := . }}

type {{ $node.Name }}BulkUpdate struct {
{{- if and $node.ID $node.ID.Type }}
	ID {{ $node.ID.Type.Type }}
{{- else }}
	ID int
{{- end }}
	{{- range $node.Fields }}
	{{- if ne .Name "id" }}
	{{- if eq (printf "%v" .Type.Type) "other" }}
	{{ ToExported .Name }} *pgtype.Interval
	{{- else }}
	{{ ToExported .Name }} *{{ .Type.Type }}
	{{- end }}
	{{- end }}
	{{- end }}
}

func (c *Client) BulkUpdate{{ $node.Name }}s(ctx context.Context, updates []{{ $node.Name }}BulkUpdate) error {
	if len(updates) == 0 {
		return nil
	}

	// Find all fields that are non-nil in any update
	fields := []string{}
	fieldMap := map[string]bool{}
	for _, u := range updates {
		{{- range $node.Fields }}
		{{- if ne .Name "id" }}
		if u.{{ ToExported .Name }} != nil {
			if !fieldMap["{{ .StorageKey }}"] {
				fields = append(fields, "{{ .StorageKey }}")
				fieldMap["{{ .StorageKey }}"] = true
			}
		}
		{{- end }}
		{{- end }}
	}
	if len(fields) == 0 {
		return nil // nothing to update
	}

	var (
		params []interface{}
		values []string
	)

	paramIdx := 1
	for _, u := range updates {
		placeholders := make([]string, 0, len(fields)+1)
		// id first
		placeholders = append(placeholders, fmt.Sprintf("$%d::bigint", paramIdx))
		params = append(params, u.ID)
		paramIdx++
		// then each field in order
		for _, f := range fields {
			{{- $cast := index $.TypeCasts (printf "%v" .Type.Type) -}}
			placeholders = append(placeholders, fmt.Sprintf("$%d{{if $cast}}::{{$cast}}{{end}}", paramIdx))
			if u.{{ ToExported .Name }} != nil {
				{{- if eq (printf "%v" .Type.Type) "*pgtype.Interval" }}
				params = append(params, *u.{{ ToExported .Name }})
				{{- else }}
				params = append(params, *u.{{ ToExported .Name }})
				{{- end }}
			} else {
				params = append(params, nil)
			}
			paramIdx++
		}
		values = append(values, fmt.Sprintf("(%s)", strings.Join(placeholders, ", ")))
	}

	// SET clause
	setClause := make([]string, len(fields))
	for i, f := range fields {
		setClause[i] = fmt.Sprintf("%s = data.%s", f, f)
	}

	// AS data(...) column list
	columns := append([]string{"id"}, fields...)

	query := fmt.Sprintf(`
UPDATE {{ $node.Table }}
SET %s
FROM (VALUES %%s) AS data(%s)
WHERE {{ $node.Table }}.id = data.id;
`, strings.Join(setClause, ", "), strings.Join(columns, ", "))
	query = fmt.Sprintf(query, strings.Join(values, ", "))
	err := c.driver.Exec(ctx, query, params, nil)
	if err != nil {
		log.Printf("Bulk update failed: %v", err)
	}
	return err
}
{{ end }}

{{- end -}}
