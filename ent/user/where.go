// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/mkraft/entxbulk/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// HubspotID applies equality check predicate on the "hubspot_id" field. It's identical to HubspotIDEQ.
func HubspotID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHubspotID, v))
}

// HubspotIDEQ applies the EQ predicate on the "hubspot_id" field.
func HubspotIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHubspotID, v))
}

// HubspotIDNEQ applies the NEQ predicate on the "hubspot_id" field.
func HubspotIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHubspotID, v))
}

// HubspotIDIn applies the In predicate on the "hubspot_id" field.
func HubspotIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHubspotID, vs...))
}

// HubspotIDNotIn applies the NotIn predicate on the "hubspot_id" field.
func HubspotIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHubspotID, vs...))
}

// HubspotIDGT applies the GT predicate on the "hubspot_id" field.
func HubspotIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHubspotID, v))
}

// HubspotIDGTE applies the GTE predicate on the "hubspot_id" field.
func HubspotIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHubspotID, v))
}

// HubspotIDLT applies the LT predicate on the "hubspot_id" field.
func HubspotIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHubspotID, v))
}

// HubspotIDLTE applies the LTE predicate on the "hubspot_id" field.
func HubspotIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHubspotID, v))
}

// HubspotIDContains applies the Contains predicate on the "hubspot_id" field.
func HubspotIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHubspotID, v))
}

// HubspotIDHasPrefix applies the HasPrefix predicate on the "hubspot_id" field.
func HubspotIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHubspotID, v))
}

// HubspotIDHasSuffix applies the HasSuffix predicate on the "hubspot_id" field.
func HubspotIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHubspotID, v))
}

// HubspotIDIsNil applies the IsNil predicate on the "hubspot_id" field.
func HubspotIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHubspotID))
}

// HubspotIDNotNil applies the NotNil predicate on the "hubspot_id" field.
func HubspotIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHubspotID))
}

// HubspotIDEqualFold applies the EqualFold predicate on the "hubspot_id" field.
func HubspotIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHubspotID, v))
}

// HubspotIDContainsFold applies the ContainsFold predicate on the "hubspot_id" field.
func HubspotIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHubspotID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
